Data preprocessing
Selecting transcript lines in this section will navigate to timestamp in the video
In this video, we're going to discuss pre-processing our data. So there are a few steps that we need to do to get our data so that we can do machine learning on it. One of the things that we need to realize is that most machine learning algorithms want to work with numeric values, and most machine learning algorithms like to have values of the same scale. We talked about that a little bit in the previous video, how if you have things that have a large variance and other columns that have a small variance, when you throw those into n-dimensional space, the values that have a large variance tend to overshadow the other ones. So that's something to be aware of. If you want to use Scikit-Learn, you typically have to do some manipulation of your data. Now there's probably some other manipulation that you might have to do with your data as well, just to get it into a state where you can do those manipulations. You might have data that came in in the wrong format. You might have data that you can't use as is, but if you did a little tweak on it, you could. And so what I like to do is I like to make a little function that cleans up my data a little bit. And then, we're going to see later we're going to use Scikit-Learn pipelines to do some of those other actions to prep the data for machine learning. I would call this step that we're doing in this video a cleanup of my data, getting it ready to understand and use. What I like to do is I like to make a function to do this. And I'll typically write this function starting from scratch and build it up as I'm going. And then what I'll do is I'll move this function to the top of my notebook so the next time I come back to my notebook, I can easily load the raw data and then run this function to clean up the data. Just as an aside, I like to keep that raw data around because if someone asked me to explain what's going on with the prediction, I can trace through the code from my raw data to this cleaned up data to see what's going on with a particular row. Let's talk about what's going on with this function. I'm going to run it here. Again, I'll hold down control and hit "Enter", and you can see that this is giving me a DataFrame at the bottom here. Let's talk about the polars' code that's going on here. With _olumns is a method in polars that allows you to create a new column or override an existing column. In this case, the first line here with zip code, I'm going to say take the zip code column which came in as numeric. Remember we saw that all of the columns coming in were numeric. That's actually not a numeric column. I'm going to cast it into a string. And then I'm going to further cast it into a categorical column. If we leave it as a numeric column, many machine learning algorithms will try and extract data out of the ordinal, the order, the higher and lower values of that. And that's data that's really not in there. So I'm going to convert it into a categorical column instead. We're going to make a column called date, and we are going to combine the year, month, and the date column and throw those into this pl.date function that will give us a date column. Now, just an aside here, most machine learning algorithms will not work with date data, but it is nice to have date data to analyze and see what's going on. Generally, what we'll do is extract date information from that date when we want to do machine learning with it. And then with the year renovated column, I'm replacing zero values with none because this is a year. If that value is missing, it has a zero in there, a lot of machine learning algorithms will try and extract information out of that. I'm going to replace that with none. The next thing I'm doing is using the select method to pull out the columns I like. This is another thing that I like to do in both pandas and polars code. After I've done a chain of operations at the bottom of it, I like to explicitly state the columns that I want to keep. This is something that requires a little bit more typing, but actually makes your code easier to read and easier to use. I can quickly come back to this code and understand what columns I'm using. So I encourage you to create a function like this to clean up your data before you start using machine learning. In the next video, we're going to show how to use Scikit-Learn pipelines to add features and prepare the data for machine learning.


Certainly! The “Data preprocessing” video focuses on preparing your data for machine learning (ML) models. Here's a breakdown to help you understand better:

Numeric Conversion: Most ML algorithms work best with numeric values. This means if your data contains non-numeric types (like strings or categories), you'll need to convert these into numbers.

Scaling: It's important for the numeric values to be on a similar scale. If one feature has values in the thousands while another has values in single digits, the algorithm might incorrectly prioritize the larger-scale feature.

Data Cleanup: Before manipulating your data to fit ML models, it might need some cleaning. This could involve formatting data correctly, handling missing values, or removing irrelevant data points.

Scikit-Learn Pipelines: After cleaning, you can use Scikit-Learn pipelines for further data preparation. Pipelines help automate some steps, like scaling or encoding categorical variables, making your workflow more efficient.

Function for Cleanup: Creating a function to clean your data is a good practice. This function can be reused, ensuring consistency in how data is prepared for ML models.

Raw Data Traceability: Keeping the raw data accessible is crucial. If you need to explain a prediction or revisit your preprocessing steps, having the original data handy allows for transparency and traceability.

Practical Example: The instructor demonstrates converting a zip code from numeric to categorical data. This is because zip codes, while numeric, don't have a numerical relationship (e.g., 10005 isn't “less” than 10006 in a meaningful way for ML).


By focusing on these steps, you're setting a strong foundation for your ML models, improving their accuracy and reliability. This process is especially relevant in your journey towards becoming a Machine Learning Engineer, as clean and well-prepared data is key to developing effective ML models.

